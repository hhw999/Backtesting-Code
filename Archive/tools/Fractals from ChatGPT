import pandas as pd
import numpy as np
import yfinance as yf
import talib

d1_data = yf.download(tickers='GBPUSD=X', start="2022-06-01", end="2023-05-30", interval='1d')

def identify_fractals(data):
    fractal_period = 5
    fractal_dates = []

    def is_bill_williams_fractal(high, low, index):
        if index < 4 or index >= len(high) - 4:
            return False
        fractal_high = high[index]
        fractal_low = low[index]
        is_high = fractal_high >= max(high[index-2:index+3]) and fractal_high >= max(high[index-1:index+4])
        is_low = fractal_low <= min(low[index-2:index+3]) and fractal_low <= min(low[index-1:index+4])
        return is_high or is_low

    def is_regular_fractal(high, low, index):
        if index < fractal_period or index >= len(high):
            return False
        fractal_high = high[index]
        fractal_low = low[index]
        is_high = fractal_high >= max(high[index-fractal_period:index+1])
        is_low = fractal_low <= min(low[index-fractal_period:index+1])
        return is_high or is_low

    for i in range(len(data)):
        if is_bill_williams_fractal(data['High'], data['Low'], i):
            fractal_dates.append((data.index[i], 'fractal_high'))
        elif is_regular_fractal(data['High'], data['Low'], i):
            fractal_dates.append((data.index[i], 'fractal_low'))

    data['Fractal'] = ''
    for date, fractal_type in fractal_dates:
        data.loc[date, 'Fractal'] = fractal_type

    # Filter consecutive "fractal_low" and keep only the lowest low
    mask = data['Fractal'] == 'fractal_low'
    consecutive_groups = (mask != mask.shift()).cumsum()
    for group_id, group_data in data[mask].groupby(consecutive_groups):
        lowest_low_index = group_data['Low'].idxmin()
        data.loc[group_data.index, 'Fractal'] = ''
        data.loc[lowest_low_index, 'Fractal'] = 'fractal_low'

    # Filter consecutive "fractal_high" and keep only the highest high
    mask = data['Fractal'] == 'fractal_high'
    consecutive_groups = (mask != mask.shift()).cumsum()
    for group_id, group_data in data[mask].groupby(consecutive_groups):
        highest_high_index = group_data['High'].idxmax()
        data.loc[group_data.index, 'Fractal'] = ''
        data.loc[highest_high_index, 'Fractal'] = 'fractal_high'

    return data

data_with_fractals = identify_fractals(d1_data)
print(data_with_fractals.to_string())
