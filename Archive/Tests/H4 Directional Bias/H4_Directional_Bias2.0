
import pandas as pd

def identify_fractals(df):
    # Identify bullish fractals
    df['bullish_fractal'] = df['High'].shift(2) < df['High'].shift(1) < df['High'] \
        > df['High'].shift(-1) > df['High'].shift(-2)
    
    # Identify bearish fractals
    df['bearish_fractal'] = df['Low'].shift(2) > df['Low'].shift(1) > df['Low'] \
        < df['Low'].shift(-1) < df['Low'].shift(-2)
    
    return df

def identify_4hour_range(df):
    # Assuming that each row of the df is a 4-hour candle
    df['range_high'] = df['High'].rolling(window=4).max().shift(1)
    df['range_low'] = df['Low'].rolling(window=4).min().shift(1)
    
    # Identify breaches of the 4-hour range
    df['breach_up'] = df['High'] > df['range_high']
    df['breach_down'] = df['Low'] < df['range_low']
    
    # Define 4-hour range based on conditions
    df['4hour_range_high'] = None
    df['4hour_range_low'] = None
    for idx, row in df.iterrows():
        if row['breach_up']:
            prev_bear_fractals = df.iloc[:idx][df['bearish_fractal'] == True]
            if not prev_bear_fractals.empty:
                last_fractal_low = prev_bear_fractals.iloc[-1]['Low']
                df.at[idx, '4hour_range_high'] = row['High']
                df.at[idx, '4hour_range_low'] = last_fractal_low

        if row['breach_down']:
            prev_bull_fractals = df.iloc[:idx][df['bullish_fractal'] == True]
            if not prev_bull_fractals.empty:
                last_fractal_high = prev_bull_fractals.iloc[-1]['High']
                df.at[idx, '4hour_range_low'] = row['Low']
                df.at[idx, '4hour_range_high'] = last_fractal_high

    return df

#####################################################################################################################

# Import 15 min data
df = pd.read_csv("/Users/hugowatkinson/Documents/Trading/Historical Data/gbpusd-m15-bid-2022-09-16-2023-09-16.csv")
df = df.iloc[(-16*100):] # cuts data down to 200 H4 candles
df['timestamp'] = pd.to_datetime(df["timestamp"], unit = "ms")
df.set_index('timestamp', inplace=True)
column_mapping = {
    'open': 'Open',
    'high': 'High',
    'low': 'Low',
    'close': 'Close',
    'volume': 'Volume'
}
df = df.rename(columns=column_mapping)
# Remove rows where 'Volume' is equal to 0
df = df[df['Volume'] != 0]

# Resample to 4-hour data with custom time offset
h4_data = df.resample('4H', offset='2H').agg({
    'Open': 'first',
    'High': 'max',
    'Low': 'min',
    'Close': 'last',
    'Volume': 'sum'
})

# Assuming df is your DataFrame
df = identify_fractals(df)
df = identify_4hour_range(df)

print(df[['bullish_fractal', 'bearish_fractal', '4hour_range_high', '4hour_range_low']])
